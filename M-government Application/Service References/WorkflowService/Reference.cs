//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace M_government_Application.WorkflowService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainCategory", Namespace="http://schemas.datacontract.org/2004/07/Wcfworkflow")]
    public partial class MainCategory : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ClientTypeField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientType {
            get {
                return this.ClientTypeField;
            }
            set {
                if ((this.ClientTypeField.Equals(value) != true)) {
                    this.ClientTypeField = value;
                    this.RaisePropertyChanged("ClientType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/Wcfworkflow")]
    public partial class Service : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DaysTakenField;
        
        private string DescriptionField;
        
        private string FeesField;
        
        private int IdField;
        
        private string LocationField;
        
        private string NameField;
        
        private byte[] ProcedureField;
        
        private int SubTypeField;
        
        private int TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DaysTaken {
            get {
                return this.DaysTakenField;
            }
            set {
                if ((object.ReferenceEquals(this.DaysTakenField, value) != true)) {
                    this.DaysTakenField = value;
                    this.RaisePropertyChanged("DaysTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fees {
            get {
                return this.FeesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeesField, value) != true)) {
                    this.FeesField = value;
                    this.RaisePropertyChanged("Fees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Procedure {
            get {
                return this.ProcedureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcedureField, value) != true)) {
                    this.ProcedureField = value;
                    this.RaisePropertyChanged("Procedure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubType {
            get {
                return this.SubTypeField;
            }
            set {
                if ((this.SubTypeField.Equals(value) != true)) {
                    this.SubTypeField = value;
                    this.RaisePropertyChanged("SubType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Document", Namespace="http://schemas.datacontract.org/2004/07/Wcfworkflow")]
    public partial class Document : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private int IndexField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Condition", Namespace="http://schemas.datacontract.org/2004/07/Wcfworkflow")]
    public partial class Condition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private int IndexField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Procedures", Namespace="http://schemas.datacontract.org/2004/07/Wcfworkflow")]
    public partial class Procedures : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private int IndexField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkflowService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getMainCategory", ReplyAction="http://tempuri.org/IService1/getMainCategoryResponse")]
        System.IAsyncResult BegingetMainCategory(int clientType, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> EndgetMainCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSubService", ReplyAction="http://tempuri.org/IService1/getSubServiceResponse")]
        System.IAsyncResult BegingetSubService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> EndgetSubService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getService", ReplyAction="http://tempuri.org/IService1/getServiceResponse")]
        System.IAsyncResult BegingetService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> EndgetService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getDocuments", ReplyAction="http://tempuri.org/IService1/getDocumentsResponse")]
        System.IAsyncResult BegingetDocuments(int serviceId, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> EndgetDocuments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getConditions", ReplyAction="http://tempuri.org/IService1/getConditionsResponse")]
        System.IAsyncResult BegingetConditions(int serviceId, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> EndgetConditions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getProcedures", ReplyAction="http://tempuri.org/IService1/getProceduresResponse")]
        System.IAsyncResult BegingetProcedures(int serviceId, int lang, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> EndgetProcedures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSingleService", ReplyAction="http://tempuri.org/IService1/getSingleServiceResponse")]
        System.IAsyncResult BegingetSingleService(int serviceId, int lang, System.AsyncCallback callback, object asyncState);
        
        M_government_Application.WorkflowService.Service EndgetSingleService(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : M_government_Application.WorkflowService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMainCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMainCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSubServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSubServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getConditionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getConditionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getProceduresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getProceduresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSingleServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSingleServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public M_government_Application.WorkflowService.Service Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((M_government_Application.WorkflowService.Service)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<M_government_Application.WorkflowService.IService1>, M_government_Application.WorkflowService.IService1 {
        
        private BeginOperationDelegate onBegingetMainCategoryDelegate;
        
        private EndOperationDelegate onEndgetMainCategoryDelegate;
        
        private System.Threading.SendOrPostCallback ongetMainCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSubServiceDelegate;
        
        private EndOperationDelegate onEndgetSubServiceDelegate;
        
        private System.Threading.SendOrPostCallback ongetSubServiceCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServiceDelegate;
        
        private EndOperationDelegate onEndgetServiceDelegate;
        
        private System.Threading.SendOrPostCallback ongetServiceCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDocumentsDelegate;
        
        private EndOperationDelegate onEndgetDocumentsDelegate;
        
        private System.Threading.SendOrPostCallback ongetDocumentsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetConditionsDelegate;
        
        private EndOperationDelegate onEndgetConditionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetConditionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProceduresDelegate;
        
        private EndOperationDelegate onEndgetProceduresDelegate;
        
        private System.Threading.SendOrPostCallback ongetProceduresCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSingleServiceDelegate;
        
        private EndOperationDelegate onEndgetSingleServiceDelegate;
        
        private System.Threading.SendOrPostCallback ongetSingleServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getMainCategoryCompletedEventArgs> getMainCategoryCompleted;
        
        public event System.EventHandler<getSubServiceCompletedEventArgs> getSubServiceCompleted;
        
        public event System.EventHandler<getServiceCompletedEventArgs> getServiceCompleted;
        
        public event System.EventHandler<getDocumentsCompletedEventArgs> getDocumentsCompleted;
        
        public event System.EventHandler<getConditionsCompletedEventArgs> getConditionsCompleted;
        
        public event System.EventHandler<getProceduresCompletedEventArgs> getProceduresCompleted;
        
        public event System.EventHandler<getSingleServiceCompletedEventArgs> getSingleServiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetMainCategory(int clientType, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMainCategory(clientType, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> M_government_Application.WorkflowService.IService1.EndgetMainCategory(System.IAsyncResult result) {
            return base.Channel.EndgetMainCategory(result);
        }
        
        private System.IAsyncResult OnBegingetMainCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int clientType = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetMainCategory(clientType, lang, callback, asyncState);
        }
        
        private object[] OnEndgetMainCategory(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetMainCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetMainCategoryCompleted(object state) {
            if ((this.getMainCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMainCategoryCompleted(this, new getMainCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMainCategoryAsync(int clientType, int lang) {
            this.getMainCategoryAsync(clientType, lang, null);
        }
        
        public void getMainCategoryAsync(int clientType, int lang, object userState) {
            if ((this.onBegingetMainCategoryDelegate == null)) {
                this.onBegingetMainCategoryDelegate = new BeginOperationDelegate(this.OnBegingetMainCategory);
            }
            if ((this.onEndgetMainCategoryDelegate == null)) {
                this.onEndgetMainCategoryDelegate = new EndOperationDelegate(this.OnEndgetMainCategory);
            }
            if ((this.ongetMainCategoryCompletedDelegate == null)) {
                this.ongetMainCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMainCategoryCompleted);
            }
            base.InvokeAsync(this.onBegingetMainCategoryDelegate, new object[] {
                        clientType,
                        lang}, this.onEndgetMainCategoryDelegate, this.ongetMainCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetSubService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSubService(mainCategoryId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> M_government_Application.WorkflowService.IService1.EndgetSubService(System.IAsyncResult result) {
            return base.Channel.EndgetSubService(result);
        }
        
        private System.IAsyncResult OnBegingetSubService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int mainCategoryId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetSubService(mainCategoryId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetSubService(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetSubService(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSubServiceCompleted(object state) {
            if ((this.getSubServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSubServiceCompleted(this, new getSubServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSubServiceAsync(int mainCategoryId, int lang) {
            this.getSubServiceAsync(mainCategoryId, lang, null);
        }
        
        public void getSubServiceAsync(int mainCategoryId, int lang, object userState) {
            if ((this.onBegingetSubServiceDelegate == null)) {
                this.onBegingetSubServiceDelegate = new BeginOperationDelegate(this.OnBegingetSubService);
            }
            if ((this.onEndgetSubServiceDelegate == null)) {
                this.onEndgetSubServiceDelegate = new EndOperationDelegate(this.OnEndgetSubService);
            }
            if ((this.ongetSubServiceCompletedDelegate == null)) {
                this.ongetSubServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSubServiceCompleted);
            }
            base.InvokeAsync(this.onBegingetSubServiceDelegate, new object[] {
                        mainCategoryId,
                        lang}, this.onEndgetSubServiceDelegate, this.ongetSubServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetService(mainCategoryId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> M_government_Application.WorkflowService.IService1.EndgetService(System.IAsyncResult result) {
            return base.Channel.EndgetService(result);
        }
        
        private System.IAsyncResult OnBegingetService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int mainCategoryId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetService(mainCategoryId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetService(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetService(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetServiceCompleted(object state) {
            if ((this.getServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServiceCompleted(this, new getServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServiceAsync(int mainCategoryId, int lang) {
            this.getServiceAsync(mainCategoryId, lang, null);
        }
        
        public void getServiceAsync(int mainCategoryId, int lang, object userState) {
            if ((this.onBegingetServiceDelegate == null)) {
                this.onBegingetServiceDelegate = new BeginOperationDelegate(this.OnBegingetService);
            }
            if ((this.onEndgetServiceDelegate == null)) {
                this.onEndgetServiceDelegate = new EndOperationDelegate(this.OnEndgetService);
            }
            if ((this.ongetServiceCompletedDelegate == null)) {
                this.ongetServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServiceCompleted);
            }
            base.InvokeAsync(this.onBegingetServiceDelegate, new object[] {
                        mainCategoryId,
                        lang}, this.onEndgetServiceDelegate, this.ongetServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetDocuments(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDocuments(serviceId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> M_government_Application.WorkflowService.IService1.EndgetDocuments(System.IAsyncResult result) {
            return base.Channel.EndgetDocuments(result);
        }
        
        private System.IAsyncResult OnBegingetDocuments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int serviceId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetDocuments(serviceId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetDocuments(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetDocuments(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDocumentsCompleted(object state) {
            if ((this.getDocumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDocumentsCompleted(this, new getDocumentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDocumentsAsync(int serviceId, int lang) {
            this.getDocumentsAsync(serviceId, lang, null);
        }
        
        public void getDocumentsAsync(int serviceId, int lang, object userState) {
            if ((this.onBegingetDocumentsDelegate == null)) {
                this.onBegingetDocumentsDelegate = new BeginOperationDelegate(this.OnBegingetDocuments);
            }
            if ((this.onEndgetDocumentsDelegate == null)) {
                this.onEndgetDocumentsDelegate = new EndOperationDelegate(this.OnEndgetDocuments);
            }
            if ((this.ongetDocumentsCompletedDelegate == null)) {
                this.ongetDocumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDocumentsCompleted);
            }
            base.InvokeAsync(this.onBegingetDocumentsDelegate, new object[] {
                        serviceId,
                        lang}, this.onEndgetDocumentsDelegate, this.ongetDocumentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetConditions(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetConditions(serviceId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> M_government_Application.WorkflowService.IService1.EndgetConditions(System.IAsyncResult result) {
            return base.Channel.EndgetConditions(result);
        }
        
        private System.IAsyncResult OnBegingetConditions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int serviceId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetConditions(serviceId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetConditions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetConditions(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetConditionsCompleted(object state) {
            if ((this.getConditionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getConditionsCompleted(this, new getConditionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getConditionsAsync(int serviceId, int lang) {
            this.getConditionsAsync(serviceId, lang, null);
        }
        
        public void getConditionsAsync(int serviceId, int lang, object userState) {
            if ((this.onBegingetConditionsDelegate == null)) {
                this.onBegingetConditionsDelegate = new BeginOperationDelegate(this.OnBegingetConditions);
            }
            if ((this.onEndgetConditionsDelegate == null)) {
                this.onEndgetConditionsDelegate = new EndOperationDelegate(this.OnEndgetConditions);
            }
            if ((this.ongetConditionsCompletedDelegate == null)) {
                this.ongetConditionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetConditionsCompleted);
            }
            base.InvokeAsync(this.onBegingetConditionsDelegate, new object[] {
                        serviceId,
                        lang}, this.onEndgetConditionsDelegate, this.ongetConditionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetProcedures(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProcedures(serviceId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> M_government_Application.WorkflowService.IService1.EndgetProcedures(System.IAsyncResult result) {
            return base.Channel.EndgetProcedures(result);
        }
        
        private System.IAsyncResult OnBegingetProcedures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int serviceId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetProcedures(serviceId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetProcedures(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetProcedures(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetProceduresCompleted(object state) {
            if ((this.getProceduresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProceduresCompleted(this, new getProceduresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProceduresAsync(int serviceId, int lang) {
            this.getProceduresAsync(serviceId, lang, null);
        }
        
        public void getProceduresAsync(int serviceId, int lang, object userState) {
            if ((this.onBegingetProceduresDelegate == null)) {
                this.onBegingetProceduresDelegate = new BeginOperationDelegate(this.OnBegingetProcedures);
            }
            if ((this.onEndgetProceduresDelegate == null)) {
                this.onEndgetProceduresDelegate = new EndOperationDelegate(this.OnEndgetProcedures);
            }
            if ((this.ongetProceduresCompletedDelegate == null)) {
                this.ongetProceduresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProceduresCompleted);
            }
            base.InvokeAsync(this.onBegingetProceduresDelegate, new object[] {
                        serviceId,
                        lang}, this.onEndgetProceduresDelegate, this.ongetProceduresCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult M_government_Application.WorkflowService.IService1.BegingetSingleService(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSingleService(serviceId, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        M_government_Application.WorkflowService.Service M_government_Application.WorkflowService.IService1.EndgetSingleService(System.IAsyncResult result) {
            return base.Channel.EndgetSingleService(result);
        }
        
        private System.IAsyncResult OnBegingetSingleService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int serviceId = ((int)(inValues[0]));
            int lang = ((int)(inValues[1]));
            return ((M_government_Application.WorkflowService.IService1)(this)).BegingetSingleService(serviceId, lang, callback, asyncState);
        }
        
        private object[] OnEndgetSingleService(System.IAsyncResult result) {
            M_government_Application.WorkflowService.Service retVal = ((M_government_Application.WorkflowService.IService1)(this)).EndgetSingleService(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSingleServiceCompleted(object state) {
            if ((this.getSingleServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSingleServiceCompleted(this, new getSingleServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSingleServiceAsync(int serviceId, int lang) {
            this.getSingleServiceAsync(serviceId, lang, null);
        }
        
        public void getSingleServiceAsync(int serviceId, int lang, object userState) {
            if ((this.onBegingetSingleServiceDelegate == null)) {
                this.onBegingetSingleServiceDelegate = new BeginOperationDelegate(this.OnBegingetSingleService);
            }
            if ((this.onEndgetSingleServiceDelegate == null)) {
                this.onEndgetSingleServiceDelegate = new EndOperationDelegate(this.OnEndgetSingleService);
            }
            if ((this.ongetSingleServiceCompletedDelegate == null)) {
                this.ongetSingleServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSingleServiceCompleted);
            }
            base.InvokeAsync(this.onBegingetSingleServiceDelegate, new object[] {
                        serviceId,
                        lang}, this.onEndgetSingleServiceDelegate, this.ongetSingleServiceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override M_government_Application.WorkflowService.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<M_government_Application.WorkflowService.IService1>, M_government_Application.WorkflowService.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<M_government_Application.WorkflowService.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetMainCategory(int clientType, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientType;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getMainCategory", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> EndgetMainCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.MainCategory>)(base.EndInvoke("getMainCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetSubService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = mainCategoryId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getSubService", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> EndgetSubService(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service>)(base.EndInvoke("getSubService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetService(int mainCategoryId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = mainCategoryId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getService", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> EndgetService(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Service>)(base.EndInvoke("getService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetDocuments(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getDocuments", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> EndgetDocuments(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Document>)(base.EndInvoke("getDocuments", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetConditions(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getConditions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> EndgetConditions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Condition>)(base.EndInvoke("getConditions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetProcedures(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getProcedures", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> EndgetProcedures(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures> _result = ((System.Collections.ObjectModel.ObservableCollection<M_government_Application.WorkflowService.Procedures>)(base.EndInvoke("getProcedures", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetSingleService(int serviceId, int lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = lang;
                System.IAsyncResult _result = base.BeginInvoke("getSingleService", _args, callback, asyncState);
                return _result;
            }
            
            public M_government_Application.WorkflowService.Service EndgetSingleService(System.IAsyncResult result) {
                object[] _args = new object[0];
                M_government_Application.WorkflowService.Service _result = ((M_government_Application.WorkflowService.Service)(base.EndInvoke("getSingleService", _args, result)));
                return _result;
            }
        }
    }
}
